{"version":3,"sources":["webpack:///../docs/components/slider.mdx"],"names":["_frontmatter","name","Playground","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Fragment","Slider","View","MarkerLabel","m","onChange","log","range","initialValue","min","max","Marker","width","mb","trackProps","bg","height","borderRadius","flexDirection","renderLabel","value","toFixed","isMDXComponent"],"mappings":"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","file":"component---docs-components-slider-mdx-4e5c82b263324c8d9a69.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/emcasa/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Fragment } from 'react';\nimport Slider from '@emcasa/ui-dom/components/Slider';\nimport View from '@emcasa/ui-dom/components/View';\nimport { MarkerLabel } from './slider.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <p>{`Slider component.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<View m={4}>\\n  <Slider\\n    onChange={console.log}\\n    range={[0, 1]}\\n    initialValue={{\\n      min: 0,\\n      max: 1,\\n    }}\\n  >\\n    <Slider.Marker name=\\\"min\\\" />\\n    <Slider.Marker name=\\\"max\\\" />\\n  </Slider>\\n</View>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Slider,\n      View,\n      MarkerLabel\n    }} mdxType=\"Playground\">\n  <View m={4} mdxType=\"View\">\n    <Slider onChange={console.log} range={[0, 1]} initialValue={{\n          min: 0,\n          max: 1\n        }} mdxType=\"Slider\">\n      <Slider.Marker name=\"min\" />\n      <Slider.Marker name=\"max\" />\n    </Slider>\n  </View>\n    </Playground>\n    <h2 {...{\n      \"id\": \"fixed-width\"\n    }}>{`Fixed width`}</h2>\n    <Playground __position={1} __code={'<View m={4}>\\n  <Slider\\n    width={200}\\n    onChange={console.log}\\n    range={[0, 1]}\\n    initialValue={{\\n      min: 0,\\n      max: 1,\\n    }}\\n  >\\n    <Slider.Marker name=\\\"min\\\" />\\n    <Slider.Marker name=\\\"max\\\" />\\n  </Slider>\\n</View>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Slider,\n      View,\n      MarkerLabel\n    }} mdxType=\"Playground\">\n  <View m={4} mdxType=\"View\">\n    <Slider width={200} onChange={console.log} range={[0, 1]} initialValue={{\n          min: 0,\n          max: 1\n        }} mdxType=\"Slider\">\n      <Slider.Marker name=\"min\" />\n      <Slider.Marker name=\"max\" />\n    </Slider>\n  </View>\n    </Playground>\n    <h2 {...{\n      \"id\": \"track-and-marker-styles\"\n    }}>{`Track and marker styles`}</h2>\n    <Playground __position={2} __code={'<View mb=\\\"25px\\\">\\n  <Slider\\n    range={[0, 1]}\\n    initialValue={1 / 2}\\n    trackProps={{ bg: \\'lightGrey\\' }}\\n  >\\n    <Slider.Marker trackProps={{ height: 4, bg: \\'pink\\' }} />\\n  </Slider>\\n</View>\\n<View mb=\\\"25px\\\">\\n  <Slider\\n    range={[0, 1]}\\n    initialValue={[1 / 4, 3 / 4]}\\n    trackProps={{ bg: \\'lightGrey\\' }}\\n  >\\n    <View\\n      bg=\\\"pink\\\"\\n      width={25}\\n      height={25}\\n      borderRadius={5}\\n      trackProps={{ bg: \\'pink\\' }}\\n    />\\n    <View\\n      bg=\\\"blue\\\"\\n      width={25}\\n      height={25}\\n      borderRadius={5}\\n      trackProps={{ bg: \\'blue\\' }}\\n    />\\n  </Slider>\\n</View>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Slider,\n      View,\n      MarkerLabel\n    }} mdxType=\"Playground\">\n  <View mb=\"25px\" mdxType=\"View\">\n    <Slider range={[0, 1]} initialValue={1 / 2} trackProps={{\n          bg: 'lightGrey'\n        }} mdxType=\"Slider\">\n      <Slider.Marker trackProps={{\n            height: 4,\n            bg: 'pink'\n          }} />\n    </Slider>\n  </View>\n  <View mb=\"25px\" mdxType=\"View\">\n    <Slider range={[0, 1]} initialValue={[1 / 4, 3 / 4]} trackProps={{\n          bg: 'lightGrey'\n        }} mdxType=\"Slider\">\n      <View bg=\"pink\" width={25} height={25} borderRadius={5} trackProps={{\n            bg: 'pink'\n          }} mdxType=\"View\" />\n      <View bg=\"blue\" width={25} height={25} borderRadius={5} trackProps={{\n            bg: 'blue'\n          }} mdxType=\"View\" />\n    </Slider>\n  </View>\n    </Playground>\n    <h2 {...{\n      \"id\": \"marker-labels\"\n    }}>{`Marker labels`}</h2>\n    <Playground __position={3} __code={'<View flexDirection=\\\"column\\\">\\n  <Slider range={[0, 100]} initialValue={[0, 100]}>\\n    <Slider.Marker\\n      renderLabel={({ value }) => (\\n        <MarkerLabel>{value.toFixed(2)}</MarkerLabel>\\n      )}\\n    />\\n    <Slider.Marker\\n      renderLabel={({ value }) => (\\n        <MarkerLabel>{value.toFixed(2)}</MarkerLabel>\\n      )}\\n    />\\n  </Slider>\\n</View>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Slider,\n      View,\n      MarkerLabel\n    }} mdxType=\"Playground\">\n  <View flexDirection=\"column\" mdxType=\"View\">\n    <Slider range={[0, 100]} initialValue={[0, 100]} mdxType=\"Slider\">\n      <Slider.Marker renderLabel={({\n            value\n          }) => <MarkerLabel mdxType=\"MarkerLabel\">{value.toFixed(2)}</MarkerLabel>} />\n      <Slider.Marker renderLabel={({\n            value\n          }) => <MarkerLabel mdxType=\"MarkerLabel\">{value.toFixed(2)}</MarkerLabel>} />\n    </Slider>\n  </View>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}