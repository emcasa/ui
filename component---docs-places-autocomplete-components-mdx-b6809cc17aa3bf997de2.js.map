{"version":3,"sources":["webpack:///../docs/places-autocomplete/components.mdx"],"names":["_frontmatter","name","Playground","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","GoogleMapsAutoComplete","__position","__code","__scope","Props","PlaceAutoComplete","AddressAutoComplete","GOOGLE_MAPS_API_KEY","style","minHeight","options","mode","apiUrl","onSelect","prediction","log","endpoint","place","value","API_ENDPOINT","input","isMDXComponent"],"mappings":"+iBAWO,IAAMA,EAAe,Q,yNAE5B,IAAsBC,EAKhBC,GALgBD,EAKW,aALH,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,kBAASE,KAIZG,EAAc,CAClBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAK5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,YAAC,IAAD,CAAOC,GAAIC,IAAwBF,QAAQ,UAC3C,gFACA,YAACT,EAAD,CAAYY,WAAY,EAAGC,OAAQ,uMAA0MC,QAAS,CACpPb,QACAK,kBACAS,UACAJ,2BACAK,sBACAC,wBACAC,yBACCC,MAAO,CACRC,UAAW,SACVX,QAAQ,cACb,YAAC,IAAD,CAAwBY,QAAS,CAC3BC,KAAM,QAERC,OAAQ,sDAA2CC,SAAU,SAAAC,GAAU,OAAIvB,QAAQwB,IAAI,CACrFD,gBACEhB,QAAQ,4BAEd,iBAAQ,CACN,GAAM,qBADR,qBAGA,wGACA,YAACT,EAAD,CAAYY,WAAY,EAAGC,OAAQ,kWAAuWC,QAAS,CACjZb,QACAK,kBACAS,UACAJ,2BACAK,sBACAC,wBACAC,yBACCC,MAAO,CACRC,UAAW,SACVX,QAAQ,cACb,YAAC,IAAD,CAAmBY,QAAS,CACtBC,KAAM,QACLC,OAAQ,kBAEQ,YAFR,EACTI,SACI,yEAEiCH,SAAU,SAACC,EAAYG,GAAb,OAAuB1B,QAAQwB,IAAI,CAClFD,aACAG,WACEnB,QAAQ,uBAEd,iBAAQ,CACN,GAAM,uBADR,uBAGA,uGACA,YAACT,EAAD,CAAYY,WAAY,EAAGC,OAAQ,6YAAgZC,QAAS,CAC1bb,QACAK,kBACAS,UACAJ,2BACAK,sBACAC,wBACAC,yBACCC,MAAO,CACRC,UAAW,SACVX,QAAQ,cACb,YAAC,IAAD,CAAqBY,QAAS,CACxBC,KAAM,QACLC,OAAQ,gBACTI,EADS,EACTA,SADS,EAETE,MAFS,OAGLF,IAAaX,IAAkBc,aAA/B,+DAEiCN,SAAU,SAACC,EAAYG,EAAOG,GAApB,OAA8B7B,QAAQwB,IAAI,CACzFD,aACAG,QACAG,WACEtB,QAAQ,0B,gNAMlBF,EAAWyB,gBAAiB","file":"component---docs-places-autocomplete-components-mdx-b6809cc17aa3bf997de2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/emcasa/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from 'docz';\nimport GoogleMapsAutoComplete from '@emcasa/places-autocomplete/GoogleMapsAutoComplete/index.jsx';\nimport PlaceAutoComplete from '@emcasa/places-autocomplete/PlaceAutoComplete/index.jsx';\nimport AddressAutoComplete from '@emcasa/places-autocomplete/AddressAutoComplete/index.jsx';\nimport { GOOGLE_MAPS_API_KEY } from '../config';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"googlemapsautocomplete\"\n    }}>{`GoogleMapsAutoComplete`}</h1>\n    <Props of={GoogleMapsAutoComplete} mdxType=\"Props\" />\n    <p>{`Select predictions from google places autocomplete api.`}</p>\n    <Playground __position={1} __code={'<GoogleMapsAutoComplete\\n  options={{ mode: \\'cors\\' }}\\n  // mock /autocomplete api\\n  apiUrl={() => `https://api.myjson.com/bins/8ur2v`}\\n  onSelect={prediction => console.log({ prediction })}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Props,\n      GoogleMapsAutoComplete,\n      PlaceAutoComplete,\n      AddressAutoComplete,\n      GOOGLE_MAPS_API_KEY\n    }} style={{\n      minHeight: \"250px\"\n    }} mdxType=\"Playground\">\n  <GoogleMapsAutoComplete options={{\n        mode: 'cors'\n      }} // mock /autocomplete api\n      apiUrl={() => `https://api.myjson.com/bins/8ur2v`} onSelect={prediction => console.log({\n        prediction\n      })} mdxType=\"GoogleMapsAutoComplete\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"placeautocomplete\"\n    }}>{`PlaceAutoComplete`}</h1>\n    <p>{`Google place autocomplete dropdown with additional data from place details api.`}</p>\n    <Playground __position={2} __code={'<PlaceAutoComplete\\n  options={{ mode: \\'cors\\' }}\\n  apiUrl={({ endpoint }) =>\\n    endpoint === \\'details\\'\\n      ? // mock /autocomplete endpoint\\n        `https://api.myjson.com/bins/tiphj`\\n      : // mock /details endpoint\\n        `https://api.myjson.com/bins/8ur2v`\\n  }\\n  onSelect={(prediction, place) => console.log({ prediction, place })}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Props,\n      GoogleMapsAutoComplete,\n      PlaceAutoComplete,\n      AddressAutoComplete,\n      GOOGLE_MAPS_API_KEY\n    }} style={{\n      minHeight: \"250px\"\n    }} mdxType=\"Playground\">\n  <PlaceAutoComplete options={{\n        mode: 'cors'\n      }} apiUrl={({\n        endpoint\n      }) => endpoint === 'details' // mock /autocomplete endpoint\n      ? `https://api.myjson.com/bins/tiphj` // mock /details endpoint\n      : `https://api.myjson.com/bins/8ur2v`} onSelect={(prediction, place) => console.log({\n        prediction,\n        place\n      })} mdxType=\"PlaceAutoComplete\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"addressautocomplete\"\n    }}>{`AddressAutoComplete`}</h1>\n    <p>{`Validates street number and postal code in addition to fetching place details.`}</p>\n    <Playground __position={3} __code={'<AddressAutoComplete\\n  options={{ mode: \\'cors\\' }}\\n  apiUrl={({ endpoint, value }) =>\\n    endpoint === PlaceAutoComplete.API_ENDPOINT\\n      ? // mock /autocomplete endpoint\\n        `http://myjson.com/tiphj`\\n      : // mock /details endpoint\\n        `https://api.myjson.com/bins/8ur2v`\\n  }\\n  onSelect={(prediction, place, input) =>\\n    console.log({ prediction, place, input })\\n  }\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Props,\n      GoogleMapsAutoComplete,\n      PlaceAutoComplete,\n      AddressAutoComplete,\n      GOOGLE_MAPS_API_KEY\n    }} style={{\n      minHeight: \"250px\"\n    }} mdxType=\"Playground\">\n  <AddressAutoComplete options={{\n        mode: 'cors'\n      }} apiUrl={({\n        endpoint,\n        value\n      }) => endpoint === PlaceAutoComplete.API_ENDPOINT // mock /autocomplete endpoint\n      ? `http://myjson.com/tiphj` // mock /details endpoint\n      : `https://api.myjson.com/bins/8ur2v`} onSelect={(prediction, place, input) => console.log({\n        prediction,\n        place,\n        input\n      })} mdxType=\"AddressAutoComplete\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}